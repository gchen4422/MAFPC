// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglik_cpp_R6
double loglik_cpp_R6(arma::vec V, const arma::mat& betahat, const arma::mat& shat2, const arma::vec& prior_weight, const int nancestry, arma::uvec diag_index);
RcppExport SEXP _mesusiehelpers_loglik_cpp_R6(SEXP VSEXP, SEXP betahatSEXP, SEXP shat2SEXP, SEXP prior_weightSEXP, SEXP nancestrySEXP, SEXP diag_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_weight(prior_weightSEXP);
    Rcpp::traits::input_parameter< const int >::type nancestry(nancestrySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type diag_index(diag_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cpp_R6(V, betahat, shat2, prior_weight, nancestry, diag_index));
    return rcpp_result_gen;
END_RCPP
}
// mvlmm_reg
SEXP mvlmm_reg(arma::mat betahat, arma::mat shat2, arma::mat V_mat);
RcppExport SEXP _mesusiehelpers_mvlmm_reg(SEXP betahatSEXP, SEXP shat2SEXP, SEXP V_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V_mat(V_matSEXP);
    rcpp_result_gen = Rcpp::wrap(mvlmm_reg(betahat, shat2, V_mat));
    return rcpp_result_gen;
END_RCPP
}
// test_ELBO
SEXP test_ELBO(arma::mat alpha, arma::cube mu1, arma::cube mu2, arma::cube XtX, arma::mat XtX_diag, arma::mat Xty, arma::vec yty, arma::vec N_vec, arma::vec sigma2, double KL);
RcppExport SEXP _mesusiehelpers_test_ELBO(SEXP alphaSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP XtXSEXP, SEXP XtX_diagSEXP, SEXP XtySEXP, SEXP ytySEXP, SEXP N_vecSEXP, SEXP sigma2SEXP, SEXP KLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtX_diag(XtX_diagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yty(ytySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type N_vec(N_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type KL(KLSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ELBO(alpha, mu1, mu2, XtX, XtX_diag, Xty, yty, N_vec, sigma2, KL));
    return rcpp_result_gen;
END_RCPP
}
// test_run_loglik_cpp
double test_run_loglik_cpp(arma::vec V, const arma::mat& betahat, const arma::mat& shat2, const arma::mat& prior_weight, const int nancestry, arma::uvec diag_index, Rcpp::List config_list);
RcppExport SEXP _mesusiehelpers_test_run_loglik_cpp(SEXP VSEXP, SEXP betahatSEXP, SEXP shat2SEXP, SEXP prior_weightSEXP, SEXP nancestrySEXP, SEXP diag_indexSEXP, SEXP config_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prior_weight(prior_weightSEXP);
    Rcpp::traits::input_parameter< const int >::type nancestry(nancestrySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type diag_index(diag_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config_list(config_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_run_loglik_cpp(V, betahat, shat2, prior_weight, nancestry, diag_index, config_list));
    return rcpp_result_gen;
END_RCPP
}
// test_run_mvlmm_reg
SEXP test_run_mvlmm_reg(arma::mat betahat, arma::mat shat2, arma::mat V_mat);
RcppExport SEXP _mesusiehelpers_test_run_mvlmm_reg(SEXP betahatSEXP, SEXP shat2SEXP, SEXP V_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V_mat(V_matSEXP);
    rcpp_result_gen = Rcpp::wrap(test_run_mvlmm_reg(betahat, shat2, V_mat));
    return rcpp_result_gen;
END_RCPP
}
// estimate_prior_annot
arma::vec estimate_prior_annot(const arma::mat& annot_file_subset, const arma::vec& alpha);
RcppExport SEXP _mesusiehelpers_estimate_prior_annot(SEXP annot_file_subsetSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type annot_file_subset(annot_file_subsetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_prior_annot(annot_file_subset, alpha));
    return rcpp_result_gen;
END_RCPP
}
// llk_prior_causal_cpp
double llk_prior_causal_cpp(const arma::vec& w, const arma::mat& annotation, const arma::mat& alpha);
RcppExport SEXP _mesusiehelpers_llk_prior_causal_cpp(SEXP wSEXP, SEXP annotationSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type annotation(annotationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(llk_prior_causal_cpp(w, annotation, alpha));
    return rcpp_result_gen;
END_RCPP
}
// optimize_llk
arma::vec optimize_llk(const arma::mat& annotation, const arma::mat& alpha, arma::vec initial_w);
RcppExport SEXP _mesusiehelpers_optimize_llk(SEXP annotationSEXP, SEXP alphaSEXP, SEXP initial_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type annotation(annotationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial_w(initial_wSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_llk(annotation, alpha, initial_w));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _mesusiehelpers_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mesusiehelpers_loglik_cpp_R6", (DL_FUNC) &_mesusiehelpers_loglik_cpp_R6, 6},
    {"_mesusiehelpers_mvlmm_reg", (DL_FUNC) &_mesusiehelpers_mvlmm_reg, 3},
    {"_mesusiehelpers_test_ELBO", (DL_FUNC) &_mesusiehelpers_test_ELBO, 10},
    {"_mesusiehelpers_test_run_loglik_cpp", (DL_FUNC) &_mesusiehelpers_test_run_loglik_cpp, 7},
    {"_mesusiehelpers_test_run_mvlmm_reg", (DL_FUNC) &_mesusiehelpers_test_run_mvlmm_reg, 3},
    {"_mesusiehelpers_estimate_prior_annot", (DL_FUNC) &_mesusiehelpers_estimate_prior_annot, 2},
    {"_mesusiehelpers_llk_prior_causal_cpp", (DL_FUNC) &_mesusiehelpers_llk_prior_causal_cpp, 3},
    {"_mesusiehelpers_optimize_llk", (DL_FUNC) &_mesusiehelpers_optimize_llk, 3},
    {"_mesusiehelpers_rcpp_hello_world", (DL_FUNC) &_mesusiehelpers_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mesusiehelpers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
